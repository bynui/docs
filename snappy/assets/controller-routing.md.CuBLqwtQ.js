import{_ as a,c as s,o as i,ag as t}from"./chunks/framework.Bw-5EFTY.js";const u=JSON.parse('{"title":"Snappy semi-auto routing","description":"How Snappy handles clean and semi-auto API routing using controller-based paths, named parameters, query strings, and optional mod_rewrite support.","frontmatter":{"title":"Snappy semi-auto routing","head":[["meta",{"name":"description","content":"How Snappy handles clean and semi-auto API routing using controller-based paths, named parameters, query strings, and optional mod_rewrite support."}],["meta",{"name":"robots","content":"index,follow"}],["meta",{"name":"keywords","content":"Snappy, PHP routing, API routes, RESTful routing, clean URLs, mod_rewrite, named parameters, query string routing, controller mapping, PHP framework routing"}],["meta",{"name":"author","content":"Shindu Samodra"}],["meta",{"property":"article:author","content":"Shindu Samodra"}],["meta",{"property":"og:title","content":"Snappy semi-auto routing"}],["meta",{"property":"og:site_name","content":"Snappy: straight-forward framework"}],["meta",{"property":"og:type","content":"Documentation website"}],["meta",{"property":"og:description","content":"How Snappy handles clean and semi-auto API routing using controller-based paths, named parameters, query strings, and optional mod_rewrite support."}],["meta",{"property":"og:url","content":"https://bynui.github.io/snappy/controller-routing.html"}]]},"headers":[],"relativePath":"controller-routing.md","filePath":"controller-routing.md"}'),n={name:"controller-routing.md"};function o(l,e,r,p,d,h){return i(),s("div",null,e[0]||(e[0]=[t(`<h1 id="semi-auto-routing" tabindex="-1">Semi-auto routing <a class="header-anchor" href="#semi-auto-routing" aria-label="Permalink to &quot;Semi-auto routing&quot;">‚Äã</a></h1><p>Although routing automatically maps the endpoint to your controller class name, you still need to define your route corresponding to the controller like below:</p><p>üí° <strong>Usage</strong></p><div class="tip custom-block"><p class="custom-block-title">Routing</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$this</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;/yourRoute&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( $callbackvalues ){</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Your code logic is here</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span></code></pre></div></div><p><em>Example:</em></p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// controller/YourClassName.php</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">namespace</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Controller</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Core\\Controller</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> YourClassName</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Controller</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> yourRequestMethod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    $this</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;/&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( $callbackValues ) {},</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;/:id&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( $callbackValues ) {},</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;/order/:id/detail&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( $callbackValues ) {},</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ]);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="defining-route" tabindex="-1">Defining route <a class="header-anchor" href="#defining-route" aria-label="Permalink to &quot;Defining route&quot;">‚Äã</a></h2><p>How to define routes is similar like other common practice:</p><ul><li><p>Base route <br><code>&quot;/&quot;</code> without trailing endpoint will refer to the controller file name. The API URL will be yourdomain.com/yourclassname</p></li><li><p>With trailing endpoint <br> ex: <code>&quot;/firstname&quot;</code>. The API URL will be yourdomain.com/yourclassname/firstname</p></li><li><p>With named parameter <br> ex: <code>/:yourparametername</code>. The parameter name must start with <code>:</code> character followed by the parameter name. This is a placeholder for the actual value that will be inserted into the URL. Example: <code>/:id</code>, the API URL will be yourdomain.com/yourclassname/123. The id is a parameter name with value 123.</p></li><li><p>With query string <br> This URL doesn&#39;t need to be defined as a different/specific route. It follows any route as long as the API URL matches the specified route pattern. Snappy handles it as a regular query parameter. Examples:</p><ul><li>URL yourdomain.com/yourclassname?page=2 will be executed under <code>/</code> base route.</li><li>URL yourdomain.com/yourclassname/123?page=2 will be executed under <code>/:id</code> named parameter route.</li><li>URL yourdomain.com/yourclassname/firstname?page=2 will be executed under <code>/firstname</code> route.</li></ul><p>Combination of routes can be defined like <code>/firstname/:x/lastname/:y</code> and the URL will be yourdomain.com/yourclassname/firstname/john/lastname/doe or the URL can be like this as well yourdomain.com/yourclassname/firstname/john/lastname/doe?page=2</p></li></ul><div class="warning custom-block"><p class="custom-block-title">‚ÑπÔ∏è NOTE</p><p>Snappy recognizes the difference between <code>/:id</code> and <code>/firstname</code> routes. <br> If <code>/firstname</code> IS DEFINED as a route then URL like yourdomain.com/yourclassname/firstname will be executed under <code>/firstname</code> route. <br> If <code>/firstname</code> IS NOT DEFINED as a route then URL like yourdomain.com/yourclassname/firstname will be executed under <code>/:id</code> route and the value of parameter name <code>id</code> is firstname.</p></div><h2 id="mod-rewrite-support" tabindex="-1">Mod_rewrite support <a class="header-anchor" href="#mod-rewrite-support" aria-label="Permalink to &quot;Mod_rewrite support&quot;">‚Äã</a></h2><p>Snappy supports clean, readable URLs by default using Apache‚Äôs <code>mod_rewrite</code> through <code>.htaccess</code>. However, when <code>mod_rewrite</code> is not available, change the <code>settings[&quot;supportHtaccess&quot;]</code> configuration to be <code>false</code> and Snappy gracefully falls back to a query string-based routing mode using <code>/?endpoint=</code>, while keeping controller route definitions unchanged.</p><p><em>Example:</em></p><p>Route: <code>&quot;/&quot;</code><br></p><blockquote><p>With .htaccess enabled:</p><ul><li>simple url: yourdomain.com/yourcontroller</li><li>with query string: yourdomain.com/yourcontroller?page=2</li></ul></blockquote><blockquote><p>Without .htaccess enabled:</p><ul><li>simple url: yourdomain.com/?endpoint=yourcontroller</li><li>with query string: yourdomain.com/?endpoint=yourcontroller&amp;page=2</li></ul></blockquote>`,16)]))}const k=a(n,[["render",o]]);export{u as __pageData,k as default};
