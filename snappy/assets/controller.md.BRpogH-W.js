import{_ as i,c as a,o as e,ag as t}from"./chunks/framework.Dkjpkr0A.js";const k=JSON.parse('{"title":"Snappy controller","description":"Snappy uses auto-routing by mapping URLs to controller files, simplifying RESTful API development with clean, maintainable PHP code.","frontmatter":{"title":"Snappy controller","head":[["meta",{"name":"description","content":"Snappy uses auto-routing by mapping URLs to controller files, simplifying RESTful API development with clean, maintainable PHP code."}],["meta",{"name":"robots","content":"index,follow"}],["meta",{"name":"keywords","content":"Snappy controller, PHP framework, routing system, automatic routing, controller mapping, RESTful API, PHP API framework, HTTP methods, no routing file, convention over configuration, API development, URL to controller mapping"}],["meta",{"name":"author","content":"Shindu Samodra"}],["meta",{"property":"article:author","content":"Shindu Samodra"}],["meta",{"property":"og:title","content":"Snappy controller"}],["meta",{"property":"og:site_name","content":"Snappy: straight-forward framework"}],["meta",{"property":"og:type","content":"Documentation website"}],["meta",{"property":"og:description","content":"Snappy uses auto-routing by mapping URLs to controller files, simplifying RESTful API development with clean, maintainable PHP code."}],["meta",{"property":"og:url","content":"https://bynui.github.io/snappy/controller.html"}]]},"headers":[],"relativePath":"controller.md","filePath":"controller.md"}'),n={name:"controller.md"};function l(o,s,p,r,h,c){return e(),a("div",null,s[0]||(s[0]=[t(`<h1 id="controller" tabindex="-1">Controller <a class="header-anchor" href="#controller" aria-label="Permalink to &quot;Controller&quot;">‚Äã</a></h1><p>Snappy uses a semi-auto routing system, removing the need for a separate routing file. Instead, the URL endpoint is automatically mapped to a controller based on its filename, allowing for a clear and intuitive structure. When a request is made to a given URL ‚Äîfor example <code>/products</code>‚Äî the framework automatically looks for a controller file named <code>products.php</code>. This means the naming of your controller files directly determines the base URL path for accessing that controller‚Äôs logic.</p><p>Within the controller, you define the behavior for different types of HTTP requests by creating public functions, keeping your endpoint logic self-contained and easy to manage. This convention-based approach simplifies routing and reduces boilerplate, making your API structure more maintainable as it grows.</p><div class="warning custom-block"><p class="custom-block-title">‚ÑπÔ∏è NOTE</p><p>Follow the <a href="https://restfulapi.net/resource-naming" target="_blank" rel="noreferrer">RESTful API resource naming principles</a> of being clean, clear, and simple.</p></div><h2 id="creating-controller" tabindex="-1">Creating controller <a class="header-anchor" href="#creating-controller" aria-label="Permalink to &quot;Creating controller&quot;">‚Äã</a></h2><p>How to create a controller:</p><ol><li>Define <code>namespace Controller</code></li><li>Define <code>use Core\\Controller</code></li><li>Create class name using PascalCase and extends your class from <code>Controller</code></li><li>Save it with the same class name using PascalCase under controller directory</li></ol><p><em>Example:</em></p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// controller/YourControllerName.php</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">namespace</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Controller</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Core\\Controller</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> YourControllerName</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Controller</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="methods" tabindex="-1">Methods <a class="header-anchor" href="#methods" aria-label="Permalink to &quot;Methods&quot;">‚Äã</a></h2><p>Snappy will execute the method inside the controller that matches the HTTP request method used in the request ‚Äî such as <code>get()</code> for GET requests, <code>post()</code> for POST requests, and so on. This convention allows you to define clean and organized RESTful endpoints without the need for manual routing configuration.</p><p>üí° <strong>Usage</strong></p><div class="tip custom-block"><p class="custom-block-title">GET method handler</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span></span></code></pre></div></div><div class="tip custom-block"><p class="custom-block-title">POST method handler</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> post</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span></span></code></pre></div></div><div class="tip custom-block"><p class="custom-block-title">DELETE method handler</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> delete</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span></span></code></pre></div></div><div class="tip custom-block"><p class="custom-block-title">PUT method handler</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> put</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span></span></code></pre></div></div><div class="tip custom-block"><p class="custom-block-title">PATCH method handler</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> patch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span></span></code></pre></div></div><p><em>Example:</em></p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// controller/YourControllerName.php</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">namespace</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Controller</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Core\\Controller</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> YourControllerName</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Controller</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> yourRequestMethod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>public <code>public function yourRequestMethod()</code> is the name of the request methods act as a function.</p><div class="warning custom-block"><p class="custom-block-title">‚ÑπÔ∏è NOTE</p><p>Write only the method handlers you need.</p></div>`,21)]))}const u=i(n,[["render",l]]);export{k as __pageData,u as default};
