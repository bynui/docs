import{_ as e,c as a,o as n,ag as r}from"./chunks/framework.Bw-5EFTY.js";const h=JSON.parse('{"title":"Snappy installation","description":"Snappy requirement and installation","frontmatter":{"title":"Snappy installation","head":[["meta",{"name":"description","content":"Snappy requirement and installation"}],["meta",{"name":"robots","content":"index,follow"}],["meta",{"name":"keywords","content":"snappy installation, snappy requirement, controller, model, middleware, php api framework"}],["meta",{"property":"og:title","content":"Snappy installation"}],["meta",{"property":"og:site_name","content":"Snappy: straight-forward framework"}],["meta",{"property":"og:type","content":"Documentation website"}],["meta",{"property":"og:description","content":"Snappy requirement and installation"}],["meta",{"property":"og:url","content":"https://bynui.github.io/snappy/what-is-snappy.html"}]]},"headers":[],"relativePath":"requirement-installation.md","filePath":"requirement-installation.md"}'),o={name:"requirement-installation.md"};function s(i,t,l,d,p,c){return n(),a("div",null,t[0]||(t[0]=[r(`<h1 id="introduction" tabindex="-1">Introduction <a class="header-anchor" href="#introduction" aria-label="Permalink to &quot;Introduction&quot;">​</a></h1><h2 id="requirements" tabindex="-1">Requirements <a class="header-anchor" href="#requirements" aria-label="Permalink to &quot;Requirements&quot;">​</a></h2><ul><li>PHP 7.0 or latest</li><li>PDO</li><li>Zlib Functions enabled</li></ul><h2 id="installation" tabindex="-1">Installation <a class="header-anchor" href="#installation" aria-label="Permalink to &quot;Installation&quot;">​</a></h2><ol><li><p>Fork <a href="https://github.com/bynui/snappy" target="_blank" rel="noreferrer">Snappy github repo</a> to your own repo and clone it to your local machine or download as zip file and extract to your PHP web server.</p></li><li><p>Adjust the value of <code>RewriteBase</code> line in the .htaccess file and point to your Snappy working directory.</p></li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> RewriteBase /yourworkingdirectory</span></span></code></pre></div><ol start="3"><li>Do <code>composer install</code></li></ol><p>This repository includes example files for a controller, middleware, model, and a SQL schema to help you get started quickly. To try it out:</p><ul><li>Create a new database in MySQL.</li><li>Import the snappy.sql file included in this repo.</li></ul><p>You&#39;re now ready to explore and build with Snappy!</p><h2 id="structure" tabindex="-1">Structure <a class="header-anchor" href="#structure" aria-label="Permalink to &quot;Structure&quot;">​</a></h2><p>Snappy applies MVC design pattern with OOP. There is no separated router to handle the endpoint url since the endpoint name and its handler are the controller name.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>.</span></span>
<span class="line"><span>├─ App</span></span>
<span class="line"><span>│  ├─ assets</span></span>
<span class="line"><span>│  ├─ config</span></span>
<span class="line"><span>│  ├─ core</span></span>
<span class="line"><span>│  │  └─ error</span></span>
<span class="line"><span>│  │  └─ traits</span></span>
<span class="line"><span>│  ├─ log</span></span>
<span class="line"><span>│  ├─ src</span></span>
<span class="line"><span>│  │  └─ controller</span></span>
<span class="line"><span>│  │  └─ model</span></span>
<span class="line"><span>│  │  └─ middleware</span></span>
<span class="line"><span>│  │  └─ helper</span></span>
<span class="line"><span>│  │  └─ view</span></span>
<span class="line"><span>│  └─ vendor</span></span>
<span class="line"><span>└─ package.json</span></span></code></pre></div><table tabindex="0"><thead><tr><th>Directory</th><th>Description</th></tr></thead><tbody><tr><td><code>assets</code></td><td>To store your asset files</td></tr><tr><td><code>config</code></td><td>For configurations or middlewares list</td></tr><tr><td><code>core</code></td><td>Contains main files that make this framework works</td></tr><tr><td><code>core/error</code></td><td>Global error handler</td></tr><tr><td><code>core/traits</code></td><td>Global traits</td></tr><tr><td><code>log</code></td><td>To store log file. Further details of this is explained in Log page</td></tr><tr><td><code>src</code></td><td>Your main working directory</td></tr><tr><td><code>src/controller</code></td><td>For your controllers as the handler of the router endoint</td></tr><tr><td><code>src/model</code></td><td>For your model files that contain SQL queries</td></tr><tr><td><code>src/middleware</code></td><td>For your middlewares</td></tr><tr><td><code>src/helper</code></td><td>For your own custom library</td></tr><tr><td><code>src/view</code></td><td>For your template files</td></tr><tr><td><code>vendor</code></td><td>For 3rd party libraries</td></tr></tbody></table>`,14)]))}const m=e(o,[["render",s]]);export{h as __pageData,m as default};
